#include <LiquidCrystal.h>

// Inicializar la pantalla LCD (configuración típica para pantallas de 16x2)
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

int valor = 0; // Variable para almacenar el valor leído del pin analógico
int pinAnalogico = A0; // Pin analógico utilizado para lectura
int pinBotonInicio = 7; // Pin del pulsador de inicio
int pinBotonParada = 8;  // Pin del pulsador de parada
bool estaLeyendo = false; // Variable para controlar el estado de la lectura

int* datos = nullptr;  // Puntero dinámico para almacenar los valores
int tamano = 10;        // Tamaño inicial del arreglo
int cantidad = 0;        // Número de valores almacenados

unsigned long tiempoInicio;  // Variable para almacenar el tiempo de inicio de la lectura
unsigned long intervalo = 1000; // Intervalo de tiempo en milisegundos (1 segundo)

const int limiteDatos = 500; // Límite de datos a almacenar

// Variables del umbral y desfase
int cruceUmbral = 512;  // Umbral para detectar cruces de cero (valor inicial, será dinámico)

void setup() {
  Serial.begin(9600);  // Inicializa la comunicación serial a 9600 baudios
  lcd.begin(16, 2);  // Inicializa la pantalla LCD con 16 columnas y 2 filas
  lcd.print("Sistema listo");  // Muestra un mensaje inicial en la pantalla LCD

  pinMode(pinBotonInicio, INPUT); // Configura el pin del pulsador de inicio como entrada
  pinMode(pinBotonParada, INPUT);  // Configura el pin del pulsador de parada como entrada
}

void loop() {
  valor = analogRead(pinAnalogico);  // Leer el valor del pin analógico
  Serial.println(valor);

  // Verificar si se presionó el botón de inicio
  if (digitalRead(pinBotonInicio) == HIGH && !estaLeyendo) {
    estaLeyendo = true;  
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Iniciando lectura");

    datos = new int[tamano];  // Inicializar el arreglo dinámico
    cantidad = 0;  
    tiempoInicio = millis();  // Capturar el tiempo de inicio
  }

  // Si estamos leyendo, capturar los datos
  if (estaLeyendo) {
    unsigned long tiempoLectura = millis() - tiempoInicio;  // Tiempo total de lectura
    
    // Si ha pasado el intervalo
    if (tiempoLectura >= intervalo) {
      Serial.print("Tiempo total transcurrido: ");
      Serial.println(tiempoLectura);
    }

    // Almacenar el nuevo valor en el arreglo dinámico
    if (cantidad == tamano) {
      int* nuevosDatos = new int[tamano * 2];
      for (int i = 0; i < tamano; i++) {
        nuevosDatos[i] = datos[i];
      }
      delete[] datos;
      datos = nuevosDatos;
      tamano *= 2;
    }

    datos[cantidad++] = valor;

    // Si alcanzamos el límite de datos, procesar los resultados
    if (cantidad >= limiteDatos) {
      estaLeyendo = false;
      procesarResultados();
    }
  }

  // Verificar si se presionó el botón de parada
  if (digitalRead(pinBotonParada) == HIGH && estaLeyendo) {
    estaLeyendo = false;
    procesarResultados();
  }
}

// Procesar resultados cuando se alcanza el límite de datos o se presiona el botón de parada
void procesarResultados() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Procesando...");

  unsigned long tiempoTotalLectura = millis() - tiempoInicio;  // Tiempo total de la lectura

  // Calcular el umbral dinámico
  float umbralDinamico = calcularUmbralDinamico();

  // Calcular frecuencia, amplitud y desfase usando el umbral dinámico
  float frecuencia = calcularFrecuencia(tiempoTotalLectura, umbralDinamico);
  float amplitud = calcularAmplitud();
  float desfase = calcularDesfase(umbralDinamico);

  // Mostrar en pantalla LCD
  lcd.setCursor(0, 0);
  lcd.print("Freq: ");
  lcd.print(frecuencia, 2);
  lcd.print(" Hz");

  lcd.setCursor(0, 1);
  lcd.print("Amp: ");
  lcd.print(amplitud, 2);
  lcd.print(" V");

  // Esperar un segundo antes de mostrar el tipo de onda
  delay(1000);

  // Detectar y mostrar el tipo de onda
  String tipoOnda = detectarTipoOnda();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Tipo: ");
  lcd.print(tipoOnda);

  // Esperar un segundo antes de reiniciar
  delay(1000);

  // Reiniciar el sistema
  delete[] datos;
  datos = nullptr;
  cantidad = 0;
  tamano = 10;
  lcd.clear();
  lcd.print("Sistema listo");
}

// Función para calcular la frecuencia de la señal
float calcularFrecuencia(unsigned long tiempoTotalLectura, float umbralDinamico) {
  int cruces = 0;
  
  // Contar cruces por el umbral dinámico
  for (int i = 1; i < cantidad; i++) {
    if ((datos[i - 1] < umbralDinamico && datos[i] >= umbralDinamico) ||
        (datos[i - 1] > umbralDinamico && datos[i] <= umbralDinamico)) {
      cruces++;
    }
  }

  // Número de cruces de cero / 2 para obtener ciclos completos
  int ciclosCompletos = cruces / 2;

  // Tiempo total en segundos
  float tiempoTotalSegundos = tiempoTotalLectura / 1000.0;

  // Frecuencia = ciclos completos / tiempo total
  float frecuencia = ciclosCompletos / tiempoTotalSegundos;

  return frecuencia;
}

// Función para calcular la amplitud de la señal
float calcularAmplitud() {
  int maxValor = datos[0];
  int minValor = datos[0];

  for (int i = 1; i < cantidad; i++) {
    if (datos[i] > maxValor) {
      maxValor = datos[i];
    }
    if (datos[i] < minValor) {
      minValor = datos[i];
    }
  }

  // Amplitud = valor máximo - valor mínimo
  float amplitud = maxValor - minValor;

  // Convertir amplitud a voltios (suponiendo un rango de 0-5V)
  return (amplitud / 1023.0) * 5;  // Asumiendo un rango de 0-5V
}

// Función para calcular el umbral dinámico
float calcularUmbralDinamico() {
  int maxValor = datos[0];
  int minValor = datos[0];

  for (int i = 1; i < cantidad; i++) {
    if (datos[i] > maxValor) {
      maxValor = datos[i];
    }
    if (datos[i] < minValor) {
      minValor = datos[i];
    }
  }

  // El umbral dinámico es el valor medio entre el valor máximo y el valor mínimo
  return (maxValor + minValor) / 2.0;
}

// Función para calcular el desfase de la señal
float calcularDesfase(float umbralDinamico) {
  int cruceInicial = -1;  // Índice donde ocurre el primer cruce por el umbral dinámico
  float tiempoDesfase = 0;

  // Buscar el primer cruce por el umbral dinámico
  for (int i = 1; i < cantidad; i++) {
    if ((datos[i - 1] < umbralDinamico && datos[i] >= umbralDinamico) ||
        (datos[i - 1] > umbralDinamico && datos[i] <= umbralDinamico)) {
      cruceInicial = i;
      break;
    }
  }

  // Si se encontró un cruce inicial, calcular el tiempo de desfase
  if (cruceInicial != -1) {
    tiempoDesfase = cruceInicial * (intervalo / (float)cantidad);
  }

  return tiempoDesfase;
}

String detectarTipoOnda() {
  int maxValor = datos[0];
  int minValor = datos[0];
  
  // Encontrar valores máximos y mínimos
  for (int i = 1; i < cantidad; i++) {
    if (datos[i] > maxValor) {
      maxValor = datos[i];
    }
    if (datos[i] < minValor) {
      minValor = datos[i];
    }
  }

  // Detectar onda cuadrada basado en repeticiones constantes
  int repeticionesMax = 0;
  int repeticionesMin = 0;
  int actual = datos[0];
  int contador = 0;
  
  // Contar repeticiones de cada valor máximo y mínimo
  for (int i = 0; i < cantidad; i++) {
    if (datos[i] == actual) {
      contador++;
    } else {
      if (actual == maxValor) {
        repeticionesMax = max(repeticionesMax, contador);
      } else if (actual == minValor) {
        repeticionesMin = max(repeticionesMin, contador);
      }
      actual = datos[i];
      contador = 1;
    }
  }
  // Considerar la última secuencia
  if (actual == maxValor) {
    repeticionesMax = max(repeticionesMax, contador);
  } else if (actual == minValor) {
    repeticionesMin = max(repeticionesMin, contador);
  }

  // Evaluar si es onda cuadrada basada en repeticiones similares
  if (repeticionesMax == repeticionesMin && repeticionesMax > 0) {
    return "Cuadrada";
  }

  // Calcular diferencias entre picos para otras ondas
  float diferenciaPicos = maxValor - minValor;

  if (diferenciaPicos < 50) {  
    return "Senoidal";
  } else if (diferenciaPicos >= 50 && diferenciaPicos <= 500) {
    return "Triangular";
  } else {
    return "Desconocida";
  }
}




